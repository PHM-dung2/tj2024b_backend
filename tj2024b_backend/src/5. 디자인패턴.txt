[ 디자인 패턴 ]
	- 패턴 : 되풀이되는
	- 소프트웨어에서 설계 과정에서 자주 발생하는 문제들의 설계 유형
	- 종류
		1. 싱글톤 패턴
		2. MVC 패턴
	
[ 싱글톤 패턴 ]
	1. 정의 : 프로그램내 객체(인스턴스)가 단 하나만 존재하는 패턴/설계
	2. 목적 : 하나의 객체(인스턴스) 를 만들고 메모리 공유
		- 여러개의 객체가 존재하면 서로 다른 메모리를 사용하므로 공유하는데 제약이 있다.
		- 협업에 있어서 굳이 여러개 객체(인스턴스)가 필요 없는 경우, 기능역할 1개
	3. 싱글톤 만들기
		단계1 : 디폴트 생성자를 private 한다.
			private 생성자명(){}
		
		단계2 : 지정한 클래스에 static 으로 객체(인스턴스) 선언하기
			private static 클래스명 멤버변수 = new 생성자명();
			
		단계3 : 지정한 클래스에 public static 클래스명 getInstance 메소드 선언하기
			public static 반환타입 getInstance(){
				return 멤버변수;
			}
	
	4. 다른 클래스에서 싱글톤 호출하기
		클래스명.getInstance();
		
[ MVC 패턴 ]
	1. 목적 : 프로젝트를 설계할때 복잡한 코드와 파일들을 MVC패턴에 따라 구성하는 방법
	2. 정의 : 소프트웨어 개발에서 사용되는 디자인패턴으로 세가지 주요 역할 분리하고 코드의 모듈화와 유지보수성 높인다.
	3. 장점 : 협업 , 유지보수 , 모듈화 , 단일기능 제공 등등
	4. 단점 : 분리함으로써 파일이 많이지므로 파일 관리 복잡도가 높다.
	5. 세 가지의 역할
		M(model)
		
		V(view)
		
		C(controller)
	
	
	
	

		
		